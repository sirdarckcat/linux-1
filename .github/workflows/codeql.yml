name: "Scheduled CodeQL Release Creator"

on:
  # schedule:
  #   # Runs every 15 minutes. You can adjust this.
  #   - cron: '*/15 * * * *'
  workflow_dispatch:

jobs:
  check-for-new-tags:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    outputs:
      new_tags: ${{ steps.find_new_tags.outputs.tags }}
      has_new_tags: ${{ steps.find_new_tags.outputs.has_tags }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          depth: 0
          filter: blob:none
          fetch-tags: true

      - name: Find new tags
        id: find_new_tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git fetch -t
          # Get latest release date (ISO8601 or empty)
          LATEST_RELEASE_ISO_DATE=$(gh release list --limit 1 --json createdAt --jq '.[0].createdAt' || echo "")

          # Convert to unix timestamp, or default to one week ago
          if [ -z "$LATEST_RELEASE_ISO_DATE" ]; then
            LATEST_RELEASE_TS=$(date -d "1 week ago" +%s)
            echo "No releases found. Processing tags created since $(date -d @$LATEST_RELEASE_TS -u)."
          else
            LATEST_RELEASE_TS=$(date -d "$LATEST_RELEASE_ISO_DATE" +%s)
            echo "Latest release was created on $(date -d @$LATEST_RELEASE_TS -u)."
          fi

          NEW_TAGS=($(git for-each-ref refs/tags --sort='-creatordate' --format='%(refname:short) %(creatordate:raw)' | (NEW_TAGS=();while read -r tag timestamp tz; do
            # Skip lines with missing tag or timestamp
            if [[ -z "$tag" || -z "$timestamp" || ! "$timestamp" =~ ^[0-9]+$ ]]; then
              echo "skipping $tag" >&2
              continue
            fi
            # Compare timestamps
            if [[ "$timestamp" -gt "$LATEST_RELEASE_TS" ]]; then
              echo "Found new tag: $tag (created at $(date -d @$timestamp -u))" >&2
              NEW_TAGS+=("$tag")
            else
              # Since tags are sorted by date, stop after old tag
              break
            fi
          done; echo ${NEW_TAGS[@]})))

          if [ ${#NEW_TAGS[@]} -eq 0 ]; then
            echo "No new tags found."
            echo "has_tags=false" >> $GITHUB_OUTPUT
          else
            JSON_TAGS=$(printf '%s\n' "${NEW_TAGS[@]}" | jq -R . | jq -s -c .)
            echo "Found new tags: $JSON_TAGS"
            echo "tags=$JSON_TAGS" >> $GITHUB_OUTPUT
            echo "has_tags=true" >> $GITHUB_OUTPUT
          fi

  create-release:
    needs: check-for-new-tags
    if: needs.check-for-new-tags.outputs.has_new_tags == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write # To create releases and upload assets
      security-events: write # For CodeQL
    
    strategy:
      fail-fast: false
      matrix:
        # Create a job for each new tag found in the previous job
        tag: ${{ fromJson(needs.check-for-new-tags.outputs.new_tags) }}

    steps:
      - name: Checkout repository at tag
        uses: actions/checkout@v4
        with:
          ref: ${{ matrix.tag }}

      - name: Install the kernel source
        run: |
          make mrproper
          sudo apt-get update
          sudo apt-get install -y libelf-dev
          make defconfig

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v4
        with:
          languages: c-cpp
          build-mode: autobuild
          db-location: /tmp/codeql_db_${{ matrix.tag }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v4
        with:
          skip-queries: true

      - name: Compress DB
        run: |
          zip -r codeql_db_${{ matrix.tag }}.zip /tmp/codeql_db_${{ matrix.tag }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ matrix.tag }}
          release_name: CodeQL DB for ${{ matrix.tag }}
          body: |
            Attached is the CodeQL database generated for tag ${{ matrix.tag }}.

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./codeql_db_${{ matrix.tag }}.zip
          asset_name: codeql_db_${{ matrix.tag }}.zip
          asset_content_type: application/zip
